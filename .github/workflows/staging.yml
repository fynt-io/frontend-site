name: Promote to Staging

on:
  pull_request:
    branches:
      - "staging"
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - "**.md"
permissions:
  id-token: write
  contents: read

concurrency:
  cancel-in-progress: true
  group: gke-deploy

env:
  PROJECT_ID: shared-429520
  CLUSTER_PROJECT_ID: staging-400918
  GAR_LOCATION: us-east1
  GKE_CLUSTER: bren-staging
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: frontend-site-staging
  REPOSITORY: frontend-site
  IMAGE: frontend-site
  ARGOCD_SERVER: argocd.wearebren.com

jobs:
  verify_branch:
#    name: Staging Branch Check
    runs-on: ubuntu-latest
    steps:
      - name: Check source branch
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" != "dev" && 
                "${{ github.event.pull_request.head.ref }}" != *"-hotfix" && 
                "${{ github.event.pull_request.head.ref }}" != *"-bugfix" ]]; then
            echo "❌ Pull requests to staging are only allowed from 'dev' or '*-hotfix/*-bugfix' branches"
            echo "Current branch: ${{ github.event.pull_request.head.ref }}"
            exit 1
          fi
          echo "✅ Branch verification passed"

  build_and_push:
#    name: Staging Build
    needs: verify_branch
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build_image.outputs.image_tag }}
      image_name: ${{ steps.build_image.outputs.image_name }}
      image_repository: ${{ steps.build_image.outputs.image_repository }}
      version: ${{ steps.extract_version.outputs.version }}
      commit_sha: ${{ steps.extract_version.outputs.commit_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Log in to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Configure docker for Google Artifact Registry
        run: gcloud auth configure-docker us-east1-docker.pkg.dev

      - name: Extract version and commit SHA
        id: extract_version
        run: |
          version=$(grep '^version:' cicd-pipeline/helmcharts/Chart.yaml | cut -d ' ' -f 2)
          commit_sha=$(echo "${GITHUB_SHA::7}")
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "commit_sha=${commit_sha}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.extract_version.outputs.version }}-${{ steps.extract_version.outputs.commit_sha }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:buildcache
          cache-from: |
            type=registry,ref=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

  deploy:
#    name: Staging Deploy
    needs: build_and_push
    if: |
      github.event.pull_request.head.ref == 'dev' ||
      endsWith(github.event.pull_request.head.ref, '-hotfix') ||
      endsWith(github.event.pull_request.head.ref, '-bugfix')
    runs-on: ubuntu-latest
    env:
      ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      IMAGE_REPOSITORY: ${{ needs.build_and_push.outputs.image_repository }}
      VERSION: ${{ needs.build_and_push.outputs.version }}
      COMMIT_SHA: ${{ needs.build_and_push.outputs.commit_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up ArgoCD CLI
        uses: clowdhaus/argo-cd-action@main
        with:
          version: 2.6.7

      - name: Set up SSH Agent and Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Deploy to ArgoCD
        run: |
          argocd app create --upsert \
            --server ${ARGOCD_SERVER} \
            --name ${DEPLOYMENT_NAME} \
            --project default \
            --helm-set image.tag=${VERSION}-${COMMIT_SHA} \
            --dest-name gke_${CLUSTER_PROJECT_ID}_${GKE_ZONE}_${GKE_CLUSTER} \
            --repo git@github.com:fynt-io/frontend-site.git \
            --path cicd-pipeline/helmcharts \
            --values-literal-file cicd-pipeline/helmcharts/values-staging.yaml \
            --dest-namespace ${REPOSITORY} \
            --sync-option CreateNamespace=true \
            --sync-policy none  \
            --revision staging \
            --insecure
          argocd app sync ${DEPLOYMENT_NAME} --server $ARGOCD_SERVER --insecure